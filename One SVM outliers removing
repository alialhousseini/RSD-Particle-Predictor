{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"hkpKTwWoURdr"},"outputs":[],"source":["###Â Remove outliers for data without noise for all the dataset at one and separately for each pad (12 pads)\n","### Build an RF and ET multioutput regressor on both datasets --> 4 models, or (6 befoire outliers removal)\n","### See the z-score method for outliers removal also"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"LVulQg4SGHOV","executionInfo":{"status":"ok","timestamp":1705684398151,"user_tz":-60,"elapsed":4757,"user":{"displayName":"Ali Al Housseini","userId":"10346049311008718307"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.svm import OneClassSVM\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.decomposition import PCA"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rQxPz6JVIJ9n"},"outputs":[],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Prcsu6_FGyw7"},"outputs":[],"source":["df = pd.read_csv('/content/drive/MyDrive/development.csv')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZrHh_yqhIZa3"},"outputs":[],"source":["## Remove noise columns :\n","## Assuming that the noise indexes are 0,7,12,15,16,17\n","ix = 0,7,12,15,16,17\n","noise = [f\"rms[{i}]\" for i in ix]\n","noise += [f\"pmax[{i}]\" for i in ix]\n","noise += [f\"negpmax[{i}]\" for i in ix]\n","noise += [f\"tmax[{i}]\" for i in ix]\n","noise += [f\"area[{i}]\" for i in ix]\n","pads = [1,2,3,4,5,6,8,9,10,11,13,14]\n","df_new = df.drop(columns = noise)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7KX4lziVG9HC"},"outputs":[],"source":["features = [\"negpmax\", \"pmax\", \"area\", \"tmax\", \"rms\"]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"J1ax0jRHHCFZ"},"outputs":[],"source":["def pad_data(index):\n","  \"Return data of a given pad\"\n","  pad_f = [feature + f\"[{index}]\" for feature in features]\n","  return X[pad_f]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":642},"executionInfo":{"elapsed":19253,"status":"ok","timestamp":1705352490448,"user":{"displayName":"Ali Al Housseini","userId":"10346049311008718307"},"user_tz":-60},"id":"Ugtf6o-6PD9W","outputId":"b1c5c48c-217a-4f98-c4f1-5fa72dfb9e31"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1500x1000 with 12 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["## Pca before removing outliers of all pads separately\n","\n","def plot_pca(pca_result, title):\n","    plt.scatter(pca_result[:, 0], pca_result[:, 1])\n","    plt.title(title)\n","    plt.xlabel('Principal Component 1')\n","    plt.ylabel('Principal Component 2')\n","    plt.grid(True)\n","\n","common_xlim = (-30, 30)\n","common_ylim = (-30, 30)\n","\n","# Create subplots\n","fig, axs = plt.subplots(3, 4, figsize=(15, 10))  # for 12 pad\n","# Iterate through each subset (pad) and plot\n","for i in range(3):\n","    for j in range(4):\n","        subset_index = i * 4 + j\n","        axs[i, j].scatter(pca1[subset_index], pca2[subset_index])\n","        axs[i, j].set_title(f'subset {pads[subset_index]}')\n","        axs[i, j].set_xlim(common_xlim)\n","        axs[i, j].set_ylim(common_ylim)\n","        axs[i, j].grid(True)\n","\n","plt.tight_layout()\n","plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FZnR7Ml0BjTY"},"outputs":[],"source":["X_pads = df_new.drop(columns = [\"x\", \"y\"])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"JsAzymGj8Q_T","outputId":"9212cc5b-27e3-4191-fd4a-63f7094322be"},"outputs":[{"name":"stderr","output_type":"stream","text":["100%|ââââââââââ| 12/12 [1:54:47<00:00, 573.93s/it]\n"]}],"source":["from tqdm import tqdm\n","outlier_fraction = 0.01\n","for pad in tqdm(pads) :\n","  \" Perform One svm outlier removal for each pad separately\"\n","  pad_df = pad_data(pad)\n","  ## Scale the data\n","  scaler = StandardScaler()\n","  pad_scaled = scaler.fit_transform(pad_df)\n","  ## Perform onesvm on pad data\n","  model = OneClassSVM(nu = outlier_fraction)\n","  label = f\"onesvm_out{pad}\"\n","  ## Label the record -1 (outlier) or 1 (not outlier) for each pad analysis\n","  X_pads[label] = model.fit_predict(pad_scaled)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tdXRiW7IZ8LI"},"outputs":[],"source":["df_all = pd.concat([X_pads, df_new[[\"x\", \"y\"]]], axis = 1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_bV_b8WcBVhR"},"outputs":[],"source":["#df_all.to_csv(\"/content/drive/MyDrive/df_cleanedperpad_1%\")"]},{"cell_type":"code","source":["df = pd.read_csv(\"/content/drive/MyDrive/df_cleanedperpad_1%.csv\")"],"metadata":{"id":"yjmhX1T4awqz","colab":{"base_uri":"https://localhost:8080/","height":334},"executionInfo":{"status":"error","timestamp":1705684448097,"user_tz":-60,"elapsed":16,"user":{"displayName":"Ali Al Housseini","userId":"10346049311008718307"}},"outputId":"f4bf3a8a-17dc-4bf6-cfc9-4d4b931be018"},"execution_count":9,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: '/content/drive/MyDrive/df_cleanedperpad_1%.csv'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-152330797a68>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"/content/drive/MyDrive/df_cleanedperpad_1%.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    209\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    210\u001b[0m                     \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnew_arg_name\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_arg_value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 211\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    212\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    213\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mF\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    329\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfind_stack_level\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    330\u001b[0m                 )\n\u001b[0;32m--> 331\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    332\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    333\u001b[0m         \u001b[0;31m# error: \"Callable[[VarArg(Any), KwArg(Any)], Any]\" has no\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options)\u001b[0m\n\u001b[1;32m    948\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    949\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 950\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    951\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    952\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    603\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    604\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 605\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    606\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    607\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1440\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1441\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1442\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1443\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1444\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1733\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1734\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1735\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1736\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1737\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    854\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    855\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 856\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    857\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    858\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/content/drive/MyDrive/df_cleanedperpad_1%.csv'"]}]},{"cell_type":"code","source":["## Columns where outliers label are stored\n","one_svm_columns = [f'onesvm_out{i}' for i in pads]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":191},"id":"kogkIc32pqyZ","executionInfo":{"status":"error","timestamp":1705684435442,"user_tz":-60,"elapsed":6,"user":{"displayName":"Ali Al Housseini","userId":"10346049311008718307"}},"outputId":"816a1985-40f0-4dfa-8eef-4709c0f2bef6"},"execution_count":6,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'pads' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-8bbb49c9cb09>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m## Columns where outliers label are stored\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mone_svm_columns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34mf'onesvm_out{i}'\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpads\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'pads' is not defined"]}]},{"cell_type":"code","source":["cleane_df = df[~(df[one_svm_columns] == -1).any(axis=1)].drop(columns = one_svm_columns + [\"Unnamed: 0\"])"],"metadata":{"id":"LNDiceAqqtZO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["## Cleaneed data description\n","clean_df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":346},"id":"QfuqjlikrQ-S","executionInfo":{"status":"ok","timestamp":1705395637212,"user_tz":-60,"elapsed":1571,"user":{"displayName":"Ali Al Housseini","userId":"10346049311008718307"}},"outputId":"b87dea76-5a51-4b75-ce15-3d2e168a9c0c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             pmax[1]     negpmax[1]        area[1]        tmax[1]  \\\n","count  343164.000000  343164.000000  343164.000000  343164.000000   \n","mean       16.294432      -8.881850      10.370211      77.042126   \n","std        16.339152       8.949480       8.146255      29.059853   \n","min         2.132574     -64.581116       0.187097       0.000000   \n","25%         5.685400      -7.913539       4.814420      71.200000   \n","50%        10.139595      -5.221067       7.892118      71.800000   \n","75%        18.748328      -4.388384      12.764946      72.400000   \n","max       100.575720      -1.054508      51.530060     204.600000   \n","\n","              rms[1]        pmax[2]     negpmax[2]        area[2]  \\\n","count  343164.000000  343164.000000  343164.000000  343164.000000   \n","mean        1.333847       8.567421      -5.709694       6.119576   \n","std         0.333881       7.116347       3.506026       4.297122   \n","min         0.410115       1.853723    -139.297558      -0.108110   \n","25%         1.093306       4.684283      -5.645416       3.122541   \n","50%         1.310960       5.719452      -4.864632       4.932499   \n","75%         1.550231       9.703970      -4.244382       7.778328   \n","max         2.683484      62.440866      -1.073634      36.267937   \n","\n","             tmax[2]         rms[2]  ...       area[13]       tmax[13]  \\\n","count  343164.000000  343164.000000  ...  343164.000000  343164.000000   \n","mean       84.006430       1.355137  ...      22.837897      71.646775   \n","std        43.032136       0.340242  ...      13.050313       0.602263   \n","min         0.000000       0.395520  ...       2.229937      70.200000   \n","25%        71.000000       1.110172  ...      11.872099      71.200000   \n","50%        71.993976       1.332615  ...      19.985023      71.600000   \n","75%        84.800000       1.575436  ...      32.008838      72.200000   \n","max       204.600000       2.800866  ...      66.312772      73.250487   \n","\n","             rms[13]       pmax[14]    negpmax[14]       area[14]  \\\n","count  343164.000000  343164.000000  343164.000000  343164.000000   \n","mean        1.409835      16.396879      -9.497369       9.778454   \n","std         0.350323      17.208802      10.020817       8.415737   \n","min         0.476449       2.119150     -89.053108      -0.039460   \n","25%         1.157488       5.772798      -8.059795       4.350244   \n","50%         1.385907      10.195352      -5.644441       7.198103   \n","75%         1.637834      18.524607      -4.800067      11.623732   \n","max         2.743050     107.236276      -0.023599      52.776255   \n","\n","            tmax[14]        rms[14]              x              y  \n","count  343164.000000  343164.000000  343164.000000  343164.000000  \n","mean       77.145600       1.436908     397.405147     404.143340  \n","std        29.928098       0.357770     117.705138     110.977948  \n","min         0.000000       0.460082     200.000000     200.000000  \n","25%        70.800000       1.179336     290.000000     310.000000  \n","50%        71.400000       1.413579     400.000000     405.000000  \n","75%        72.200000       1.669761     485.000000     500.000000  \n","max       204.600000       2.864155     600.000000     600.000000  \n","\n","[8 rows x 62 columns]"],"text/html":["\n","  <div id=\"df-bd23e84f-8165-4980-b1d0-e7b533327657\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>pmax[1]</th>\n","      <th>negpmax[1]</th>\n","      <th>area[1]</th>\n","      <th>tmax[1]</th>\n","      <th>rms[1]</th>\n","      <th>pmax[2]</th>\n","      <th>negpmax[2]</th>\n","      <th>area[2]</th>\n","      <th>tmax[2]</th>\n","      <th>rms[2]</th>\n","      <th>...</th>\n","      <th>area[13]</th>\n","      <th>tmax[13]</th>\n","      <th>rms[13]</th>\n","      <th>pmax[14]</th>\n","      <th>negpmax[14]</th>\n","      <th>area[14]</th>\n","      <th>tmax[14]</th>\n","      <th>rms[14]</th>\n","      <th>x</th>\n","      <th>y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>343164.000000</td>\n","      <td>343164.000000</td>\n","      <td>343164.000000</td>\n","      <td>343164.000000</td>\n","      <td>343164.000000</td>\n","      <td>343164.000000</td>\n","      <td>343164.000000</td>\n","      <td>343164.000000</td>\n","      <td>343164.000000</td>\n","      <td>343164.000000</td>\n","      <td>...</td>\n","      <td>343164.000000</td>\n","      <td>343164.000000</td>\n","      <td>343164.000000</td>\n","      <td>343164.000000</td>\n","      <td>343164.000000</td>\n","      <td>343164.000000</td>\n","      <td>343164.000000</td>\n","      <td>343164.000000</td>\n","      <td>343164.000000</td>\n","      <td>343164.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>16.294432</td>\n","      <td>-8.881850</td>\n","      <td>10.370211</td>\n","      <td>77.042126</td>\n","      <td>1.333847</td>\n","      <td>8.567421</td>\n","      <td>-5.709694</td>\n","      <td>6.119576</td>\n","      <td>84.006430</td>\n","      <td>1.355137</td>\n","      <td>...</td>\n","      <td>22.837897</td>\n","      <td>71.646775</td>\n","      <td>1.409835</td>\n","      <td>16.396879</td>\n","      <td>-9.497369</td>\n","      <td>9.778454</td>\n","      <td>77.145600</td>\n","      <td>1.436908</td>\n","      <td>397.405147</td>\n","      <td>404.143340</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>16.339152</td>\n","      <td>8.949480</td>\n","      <td>8.146255</td>\n","      <td>29.059853</td>\n","      <td>0.333881</td>\n","      <td>7.116347</td>\n","      <td>3.506026</td>\n","      <td>4.297122</td>\n","      <td>43.032136</td>\n","      <td>0.340242</td>\n","      <td>...</td>\n","      <td>13.050313</td>\n","      <td>0.602263</td>\n","      <td>0.350323</td>\n","      <td>17.208802</td>\n","      <td>10.020817</td>\n","      <td>8.415737</td>\n","      <td>29.928098</td>\n","      <td>0.357770</td>\n","      <td>117.705138</td>\n","      <td>110.977948</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>2.132574</td>\n","      <td>-64.581116</td>\n","      <td>0.187097</td>\n","      <td>0.000000</td>\n","      <td>0.410115</td>\n","      <td>1.853723</td>\n","      <td>-139.297558</td>\n","      <td>-0.108110</td>\n","      <td>0.000000</td>\n","      <td>0.395520</td>\n","      <td>...</td>\n","      <td>2.229937</td>\n","      <td>70.200000</td>\n","      <td>0.476449</td>\n","      <td>2.119150</td>\n","      <td>-89.053108</td>\n","      <td>-0.039460</td>\n","      <td>0.000000</td>\n","      <td>0.460082</td>\n","      <td>200.000000</td>\n","      <td>200.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>5.685400</td>\n","      <td>-7.913539</td>\n","      <td>4.814420</td>\n","      <td>71.200000</td>\n","      <td>1.093306</td>\n","      <td>4.684283</td>\n","      <td>-5.645416</td>\n","      <td>3.122541</td>\n","      <td>71.000000</td>\n","      <td>1.110172</td>\n","      <td>...</td>\n","      <td>11.872099</td>\n","      <td>71.200000</td>\n","      <td>1.157488</td>\n","      <td>5.772798</td>\n","      <td>-8.059795</td>\n","      <td>4.350244</td>\n","      <td>70.800000</td>\n","      <td>1.179336</td>\n","      <td>290.000000</td>\n","      <td>310.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>10.139595</td>\n","      <td>-5.221067</td>\n","      <td>7.892118</td>\n","      <td>71.800000</td>\n","      <td>1.310960</td>\n","      <td>5.719452</td>\n","      <td>-4.864632</td>\n","      <td>4.932499</td>\n","      <td>71.993976</td>\n","      <td>1.332615</td>\n","      <td>...</td>\n","      <td>19.985023</td>\n","      <td>71.600000</td>\n","      <td>1.385907</td>\n","      <td>10.195352</td>\n","      <td>-5.644441</td>\n","      <td>7.198103</td>\n","      <td>71.400000</td>\n","      <td>1.413579</td>\n","      <td>400.000000</td>\n","      <td>405.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>18.748328</td>\n","      <td>-4.388384</td>\n","      <td>12.764946</td>\n","      <td>72.400000</td>\n","      <td>1.550231</td>\n","      <td>9.703970</td>\n","      <td>-4.244382</td>\n","      <td>7.778328</td>\n","      <td>84.800000</td>\n","      <td>1.575436</td>\n","      <td>...</td>\n","      <td>32.008838</td>\n","      <td>72.200000</td>\n","      <td>1.637834</td>\n","      <td>18.524607</td>\n","      <td>-4.800067</td>\n","      <td>11.623732</td>\n","      <td>72.200000</td>\n","      <td>1.669761</td>\n","      <td>485.000000</td>\n","      <td>500.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>100.575720</td>\n","      <td>-1.054508</td>\n","      <td>51.530060</td>\n","      <td>204.600000</td>\n","      <td>2.683484</td>\n","      <td>62.440866</td>\n","      <td>-1.073634</td>\n","      <td>36.267937</td>\n","      <td>204.600000</td>\n","      <td>2.800866</td>\n","      <td>...</td>\n","      <td>66.312772</td>\n","      <td>73.250487</td>\n","      <td>2.743050</td>\n","      <td>107.236276</td>\n","      <td>-0.023599</td>\n","      <td>52.776255</td>\n","      <td>204.600000</td>\n","      <td>2.864155</td>\n","      <td>600.000000</td>\n","      <td>600.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>8 rows Ã 62 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bd23e84f-8165-4980-b1d0-e7b533327657')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-bd23e84f-8165-4980-b1d0-e7b533327657 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-bd23e84f-8165-4980-b1d0-e7b533327657');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-2e1cb6ed-89ce-478c-af38-7fbd28f06e6b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2e1cb6ed-89ce-478c-af38-7fbd28f06e6b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-2e1cb6ed-89ce-478c-af38-7fbd28f06e6b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["clean_df.to_csv(\"/content/drive/MyDrive/final.csv\", index = False)"],"metadata":{"id":"1KH5RL1ZvjW_"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[],"mount_file_id":"1Vt1sXpDQB7a61EwB6hKNM98qjWtIMxUf","authorship_tag":"ABX9TyORiFo+PK65e1Bot/0PzyRi"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}